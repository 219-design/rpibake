#!/bin/bash
set -euo pipefail
IFS=$'\n\t'

ROOT_DIR="$(dirname $(readlink -f "${BASH_SOURCE[0]}"))"

source $ROOT_DIR/vars

CLIENT_USER=pi
CLIENT_HOSTNAME=localhost
CLIENT_SSH_ORIGIN=${CLIENT_USER}@${CLIENT_HOSTNAME}
CLIENT_SSH_PORT=${Q_HOST_SSH_PORT}
CLIENT_RSYNC_SSH_ORIGIN=${CLIENT_SSH_ORIGIN}

function debug() {
    echo $@ 1>&2
}

function help() {
    debug "bake"
    debug "  prerequisites      Install host system prerequisites to run QEMU."
    debug "  image"
    debug "    expand BYTES     Expand the disk image to a given size in bytes."
    debug "  mount              Mount the image and store SSH installer into image."
    debug "  qemu               Run Raspberry Pi OS in QEMU."
    debug "  wait               Wait until SSH succeeds."
    debug "  ssh                SSH into the guest system."
    debug "  rsync"
    debug "    ssh              Invoke rsync over SSH."
    debug "  halt               SSH into the guest system and turn it off."
    debug "  get"
    debug "    user             Get the client user name."
    debug "    ssh"
    debug "      origin         Get the SSH destination user@hostname."
    debug "      port           Get the SSH port."
    exit -1
}

function pipe_ssh() {
    set +e
    ssh \
        ${CLIENT_SSH_ORIGIN} \
        -p ${Q_HOST_SSH_PORT} \
        -i $Q_IDENTITY_SSH \
        -o StrictHostKeyChecking=no \
        -o 'ConnectionAttempts 1000' \
        $@ \
    ;
    RETCODE=$?
    set -e
    return $RETCODE
}

function pipe_ssh_exit() {
    pipe_ssh -T <<EOF
exit
EOF
}

function pipe_wait() {
    until pipe_ssh_exit
    do
        sleep 1
    done
}

function pipe_rsync_ssh() {
    rsync -e "ssh -p ${CLIENT_SSH_PORT} -i ${Q_IDENTITY_SSH}" $@
}

function trim() {
    echo "$1" | sed -re 's/^[\t\r\n ]*//' | sed -re 's/[\t\r\n ]*$//'
}

function partition_count() {
    IMG=$1
    partx $IMG -g | wc -l
}

function partition_query() {
    IMG=$1
    PARTITION=$2
    FIELD=$3
    trim "$(partx $IMG --bytes -g -n $PARTITION -o $FIELD)"
}

function stage_prerequisites() {
    sudo apt-get -y install \
        qemu-system-arm \
        qemu-user \
    ;
}

function stage_image() {
    if [ "$#" -lt 1 ]; then
        debug "Missing image argument."
        help
    fi
    COMMAND=$1
    shift
    case ${COMMAND} in
        expand)
            stage_image_expand $@
            ;;
        *)
            debug "Unknown image command \"${COMMAND}\"."
            help
            ;;
    esac
}

function stage_image_expand() {
    DISK_SIZE=$1
    shift

    SECTOR_SIZE=512

    # Verify that the new disk size is in a multiple of the sector size.
    if [ "0" -ne $(( ${DISK_SIZE} % ${SECTOR_SIZE})) ]
    then
        debug "The specified disk size ${DISK_SIZE} is not divisible by the sector size ${SECTOR_SIZE}."
        exit -1
    fi

    # Verify that the image contains exactly partitions 1 and 2.
    COUNT_PARTITION=$(partition_count ${Q_IMG})
    if [ 2 -ne $COUNT_PARTITION ]
    then
        debug "Expected to find 2 partitions."
        exit -1
    fi
    for i in $(seq $COUNT_PARTITION)
    do
        case "$i" in
        1) # This should map to the boot partition.
            ;&
        2) # This should map to the main partition.
            debug "Partition $i"
            debug "start    $(partition_query ${Q_IMG} $i START)s"
            debug "end      $(partition_query ${Q_IMG} $i END)s"
            debug "sectors  $(partition_query ${Q_IMG} $i SECTORS)s"
            debug "size     $(partition_query ${Q_IMG} $i SIZE)"
            debug "name     $(partition_query ${Q_IMG} $i NAME)"
            debug "uuid     $(partition_query ${Q_IMG} $i UUID)"
            debug
            ;;
        *)
            debug "Unexpected partition number $i."
            exit -1
            ;;
        esac
    done

    # Verify that the partition is actually being expanded and not shrunk.
    DISK_SIZE_CURRENT=$(stat -c "%s" ${Q_IMG})
    if [ ${DISK_SIZE} -lt ${DISK_SIZE_CURRENT} ]
    then
        debug "The requested disk size ${DISK_SIZE} is less than the current disk size ${DISK_SIZE_CURRENT}."
        help
    fi

    # Expand disk image file.
    qemu-img resize -f raw ${Q_IMG} ${DISK_SIZE} 1>&2

    # Expand partition.
    DISK_SIZE_SECTORS=$(( ${DISK_SIZE} / ${SECTOR_SIZE} ))
    DISK_END_SECTORS=$(( ${DISK_SIZE_SECTORS} - 1 )) # The minus 1 is because this is the last actual sector's number.
    parted ${Q_IMG} resizepart 2 ${DISK_END_SECTORS}s

    debug "Loop back disk."
    LOOPBACK=$(sudo losetup -f)
    sudo losetup -P $LOOPBACK $Q_IMG
    PART_BOOT=$(mktemp -d)
    PART_USER=$(mktemp -d)

    function unloop_disks() {
        debug "Unloop disk."
        sudo losetup -d $LOOPBACK
    }
    trap unloop_disks EXIT

    # Filesystem check before.
    sudo e2fsck -f ${LOOPBACK}p2

    # Expand filesystem.
    sudo resize2fs ${LOOPBACK}p2

    # Filesystem check and after.
    sudo e2fsck -f ${LOOPBACK}p2

    trap - EXIT
    unloop_disks
}

function stage_mount() {
    debug "Loop back disk."
    LOOPBACK=$(sudo losetup -f)
    sudo losetup -P $LOOPBACK $Q_IMG
    PART_BOOT=$(mktemp -d)
    PART_USER=$(mktemp -d)

    function unloop_disks() {
        debug "Unloop disk."
        sudo losetup -d $LOOPBACK
    }
    trap unloop_disks EXIT

    debug "Mount disk."
    sudo mount ${LOOPBACK}p1 $PART_BOOT
    sudo mount ${LOOPBACK}p2 $PART_USER

    function unmount_disks() {
        debug "Unmount disk."
        sudo umount $PART_BOOT
        sudo umount $PART_USER

        unloop_disks
    }
    trap unmount_disks EXIT

    debug "Generate custom SSH key."
    if [[ -f .user/id_rsa ]]
    then
        debug "Key exists, not regenerating."
    else
        mkdir -p .user/
        ssh-keygen -b 4096 -t rsa -f .user/id_rsa -q -N ""
    fi

    debug "Install SSH keys."
    sudo mkdir -p $PART_USER/home/pi/.ssh
    sudo cp .user/id_rsa.pub $PART_USER/home/pi/.ssh/authorized_keys

    debug "Install SSH server installer."
    sudo mv $PART_USER/etc/rc.local $PART_USER/etc/rc.local.original
    sudo cp $ROOT_DIR/mount/rc.local $PART_USER/etc/

    trap - EXIT
    unmount_disks
}

function stage_qemu() {
    sudo qemu-system-arm \
        -M versatilepb \
        -cpu arm1176 \
        -m 256 \
        -append "root=/dev/sda2 rootfstype=ext4 rw" \
        -net nic \
        -net user,hostfwd=tcp::$Q_HOST_SSH_PORT-:22 \
        -net tap,ifname=vnet0,script=no,downscript=no \
        -drive file=$Q_IMG,format=raw \
        -dtb $Q_DTB \
        -kernel $Q_KERNEL \
        -no-reboot \
        $@ \
    ;
}

function stage_wait() {
    pipe_wait $@
}

function stage_ssh() {
    pipe_ssh $@
}

function stage_rsync() {
    if [ "$#" -lt 1 ]; then
        debug "Missing rsync argument."
        help
    fi
    COMMAND=$1
    shift
    case ${COMMAND} in
        ssh)
            stage_rsync_ssh $@
            ;;
        *)
            debug "Unknown rsync command \"${COMMAND}\"."
            help
            ;;
    esac
}

function stage_rsync_ssh() {
    pipe_rsync_ssh $@
}

function stage_halt() {
    stage_ssh $@ <<EOF
sudo reboot
EOF
}

function stage_get() {
    if [ "$#" -lt 1 ]; then
        debug "Missing get argument."
        help
    fi
    COMMAND=$1
    shift
    case ${COMMAND} in
        user)
            echo ${CLIENT_USER}
            ;;
        ssh)
            if [ "$#" -lt 1 ]; then
                debug "Missing get ssh argument."
                help
            fi
            COMMAND=$1
            shift
            case ${COMMAND} in
                origin)
                    echo ${CLIENT_SSH_ORIGIN}
                    ;;
                port)
                    echo ${CLIENT_SSH_PORT}
                    ;;
                *)
                    debug "Unknown get ssh origin command \"${COMMAND}\"."
                    help
                    ;;
            esac
            ;;
        *)
            debug "Unknown get subcommand \"${COMMAND}\"."
            help
            ;;
    esac
}


function stage_main() {
    if [ "$#" -lt 1 ]; then
        debug "Missing argument."
        help
    fi
    COMMAND=$1
    shift
    case ${COMMAND} in
        prerequisites)
            stage_prerequisites $@
            ;;
        image)
            stage_image $@
            ;;
        mount)
            stage_mount $@
            ;;
        qemu)
            stage_qemu $@
            ;;
        wait)
            stage_wait $@
            ;;
        ssh)
            stage_ssh $@
            ;;
        rsync)
            stage_rsync $@
            ;;
        halt)
            stage_halt $@
            ;;
        get)
            stage_get $@
            ;;
        *)
            debug "Unknown command \"${COMMAND}\"."
            help
            ;;
    esac
}

stage_main $@